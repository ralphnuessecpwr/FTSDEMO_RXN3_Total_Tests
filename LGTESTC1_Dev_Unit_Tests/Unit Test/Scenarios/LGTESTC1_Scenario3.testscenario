<?xml version="1.0" encoding="UTF-8"?>
<?totaltestVersion 19.3.1.v20181214-1343_790?>
<!--Topaz for Total Test 19.3.1.v20181214-1343_790 20.02.2019 20:15:29-->
<testscenario:testscenario xmlns:checkconditions="http://www.compuware.com/model/xml/checkconditions" xmlns:listructure="http://www.compuware.com/model/xml/listructure" xmlns:properties="http://www.compuware.com/model/xml/properties" xmlns:testcase="http://www.compuware.com/model/xml/testcase" xmlns:testscenario="http://www.compuware.com/model/xml/testscenario" alias="" id="Unit%20Test/Scenarios/LGTESTC1_Scenario3.testscenario">
  <testscenario:description>Search for non existing customer</testscenario:description>
  <testscenario:testcases>
    <testscenario:testcase alias="" csect="LGTESTC1" encoding="1047" entrypoint="LGTESTC1" id="Unit%20Test/Scenarios/LGTESTC1_Scenario3.testscenario%23LGTESTC1Case1" target="LGTESTC1">
      <testcase:description></testcase:description>
      <testcase:ddiotype>NONE</testcase:ddiotype>
      <testcase:targetCaptureCompileTime>1544768831000</testcase:targetCaptureCompileTime>
      <testcase:interface>../Interfaces/LGTESTC1.interface#Unit%20Test/Interfaces/LGTESTC1.interface</testcase:interface>
      <testcase:input listructure="../Structures/LGTESTC1_dfheiblk.listructure#Unit%20Test/Structures/LGTESTC1_dfheiblk.listructure">
        <testcase:data baseType="listructure:structType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk" id="arg0.dfheiblk">
          <properties:properties>
            <properties:property name="value" type="string">0141508C0119051FE2E2C3F10000306CF1F9F9F10000012509C47D00000000000000000000000000000000000000000000000040404040404040400000000000000000000000000000000000000000000000000000</properties:property>
            <properties:property name="expectedValue" type="string">0141508C0119051FE2E2C3F10000306CF1F9F9F10000012509C47D180400000000000000000000000000000000000000000000E2E2D4C1D7C3F1400000000000000000000000000000000000000000000000000000</properties:property>
          </properties:properties>
        </testcase:data>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibtime" id="input.arg0.dfheiblk.eibtime" offset="0"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibdate" id="input.arg0.dfheiblk.eibdate" offset="4"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibtrnid" id="input.arg0.dfheiblk.eibtrnid" offset="8"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibtaskn" id="input.arg0.dfheiblk.eibtaskn" offset="12"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibtrmid" id="input.arg0.dfheiblk.eibtrmid" offset="16"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.dfheigdi" id="input.arg0.dfheiblk.dfheigdi" offset="20"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibcposn" id="input.arg0.dfheiblk.eibcposn" offset="22"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibcalen" id="input.arg0.dfheiblk.eibcalen" offset="24"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibaid" id="input.arg0.dfheiblk.eibaid" offset="26"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibfn" id="input.arg0.dfheiblk.eibfn" offset="27"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibrcode" id="input.arg0.dfheiblk.eibrcode" offset="29"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibds" id="input.arg0.dfheiblk.eibds" offset="35"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibreqid" id="input.arg0.dfheiblk.eibreqid" offset="43"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibrsrce" id="input.arg0.dfheiblk.eibrsrce" offset="51"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibsync" id="input.arg0.dfheiblk.eibsync" offset="59"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibfree" id="input.arg0.dfheiblk.eibfree" offset="60"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibrecv" id="input.arg0.dfheiblk.eibrecv" offset="61"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibfil01" id="input.arg0.dfheiblk.eibfil01" offset="62"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibatt" id="input.arg0.dfheiblk.eibatt" offset="63"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibeoc" id="input.arg0.dfheiblk.eibeoc" offset="64"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibfmh" id="input.arg0.dfheiblk.eibfmh" offset="65"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibcompl" id="input.arg0.dfheiblk.eibcompl" offset="66"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibsig" id="input.arg0.dfheiblk.eibsig" offset="67"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibconf" id="input.arg0.dfheiblk.eibconf" offset="68"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eiberr" id="input.arg0.dfheiblk.eiberr" offset="69"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eiberrcd" id="input.arg0.dfheiblk.eiberrcd" offset="70"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibsynrb" id="input.arg0.dfheiblk.eibsynrb" offset="74"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibnodat" id="input.arg0.dfheiblk.eibnodat" offset="75"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibresp" id="input.arg0.dfheiblk.eibresp" offset="76"/>
        <testcase:data baseType="listructure:numberType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibresp2" id="input.arg0.dfheiblk.eibresp2" offset="80"/>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfheiblk.listructure#dfheiblk.eibrldbk" id="input.arg0.dfheiblk.eibrldbk" offset="84"/>
      </testcase:input>
      <testcase:input listructure="../Structures/LGTESTC1_dfhcommarea.listructure#Unit%20Test/Structures/LGTESTC1_dfhcommarea.listructure">
        <testcase:data baseType="listructure:structType ../Structures/LGTESTC1_dfhcommarea.listructure#dfhcommarea" id="arg1.dfhcommarea">
          <properties:properties>
            <properties:property name="value" type="string">F0</properties:property>
            <properties:property name="expectedValue" type="string">F0</properties:property>
          </properties:properties>
        </testcase:data>
        <testcase:data baseType="listructure:stringType ../Structures/LGTESTC1_dfhcommarea.listructure#dfhcommarea.dfhcommarea" id="input.arg1.dfhcommarea.dfhcommarea" offset="0"/>
      </testcase:input>
      <testcase:output listructure="../Structures/LGTESTC1_dfheiblk.listructure#Unit%20Test/Structures/LGTESTC1_dfheiblk.listructure"/>
      <testcase:output listructure="../Structures/LGTESTC1_dfhcommarea.listructure#Unit%20Test/Structures/LGTESTC1_dfhcommarea.listructure"/>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for eibtime failed" name="Check for eibtime" refData="#input.arg0.dfheiblk.eibtime">
          <checkconditions:expression>BigDecimalCreator.make('141508').compareTo(output.arg0.dfheiblk.eibtime) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">141508</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibdate failed" name="Check for eibdate" refData="#input.arg0.dfheiblk.eibdate">
          <checkconditions:expression>BigDecimalCreator.make('119051').compareTo(output.arg0.dfheiblk.eibdate) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">119051</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibtrnid failed" name="Check for eibtrnid" refData="#input.arg0.dfheiblk.eibtrnid">
          <checkconditions:expression>'SSC1' eq output.arg0.dfheiblk.eibtrnid</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">SSC1</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibtaskn failed" name="Check for eibtaskn" refData="#input.arg0.dfheiblk.eibtaskn">
          <checkconditions:expression>BigDecimalCreator.make('306').compareTo(output.arg0.dfheiblk.eibtaskn) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">306</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibtrmid failed" name="Check for eibtrmid" refData="#input.arg0.dfheiblk.eibtrmid">
          <checkconditions:expression>'1991' eq output.arg0.dfheiblk.eibtrmid</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">1991</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for dfheigdi failed" name="Check for dfheigdi" refData="#input.arg0.dfheiblk.dfheigdi">
          <checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg0.dfheiblk.dfheigdi) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibcposn failed" name="Check for eibcposn" refData="#input.arg0.dfheiblk.eibcposn">
          <checkconditions:expression>BigDecimalCreator.make('293').compareTo(output.arg0.dfheiblk.eibcposn) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">293</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibcalen failed" name="Check for eibcalen" refData="#input.arg0.dfheiblk.eibcalen">
          <checkconditions:expression>BigDecimalCreator.make('2500').compareTo(output.arg0.dfheiblk.eibcalen) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">2500</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibaid failed" name="Check for eibaid" refData="#input.arg0.dfheiblk.eibaid">
          <checkconditions:expression>&quot;'&quot; eq output.arg0.dfheiblk.eibaid</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibfn failed" name="Check for eibfn" refData="#input.arg0.dfheiblk.eibfn">
          <checkconditions:expression>x'1804' eq output.arg0.dfheiblk.eibfn</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'1804'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibrcode failed" name="Check for eibrcode" refData="#input.arg0.dfheiblk.eibrcode">
          <checkconditions:expression>x'000000000000' eq output.arg0.dfheiblk.eibrcode</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'000000000000'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibds failed" name="Check for eibds" refData="#input.arg0.dfheiblk.eibds">
          <checkconditions:expression>x'0000000000000000' eq output.arg0.dfheiblk.eibds</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'0000000000000000'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibreqid failed" name="Check for eibreqid" refData="#input.arg0.dfheiblk.eibreqid">
          <checkconditions:expression>x'0000000000000000' eq output.arg0.dfheiblk.eibreqid</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'0000000000000000'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibrsrce failed" name="Check for eibrsrce" refData="#input.arg0.dfheiblk.eibrsrce">
          <checkconditions:expression>'SSMAPC1' eq output.arg0.dfheiblk.eibrsrce</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">SSMAPC1</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibsync failed" name="Check for eibsync" refData="#input.arg0.dfheiblk.eibsync">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibsync</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibfree failed" name="Check for eibfree" refData="#input.arg0.dfheiblk.eibfree">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibfree</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibrecv failed" name="Check for eibrecv" refData="#input.arg0.dfheiblk.eibrecv">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibrecv</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibfil01 failed" name="Check for eibfil01" refData="#input.arg0.dfheiblk.eibfil01">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibfil01</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibatt failed" name="Check for eibatt" refData="#input.arg0.dfheiblk.eibatt">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibatt</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibeoc failed" name="Check for eibeoc" refData="#input.arg0.dfheiblk.eibeoc">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibeoc</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibfmh failed" name="Check for eibfmh" refData="#input.arg0.dfheiblk.eibfmh">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibfmh</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibcompl failed" name="Check for eibcompl" refData="#input.arg0.dfheiblk.eibcompl">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibcompl</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibsig failed" name="Check for eibsig" refData="#input.arg0.dfheiblk.eibsig">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibsig</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibconf failed" name="Check for eibconf" refData="#input.arg0.dfheiblk.eibconf">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibconf</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eiberr failed" name="Check for eiberr" refData="#input.arg0.dfheiblk.eiberr">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eiberr</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eiberrcd failed" name="Check for eiberrcd" refData="#input.arg0.dfheiblk.eiberrcd">
          <checkconditions:expression>x'00000000' eq output.arg0.dfheiblk.eiberrcd</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00000000'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibsynrb failed" name="Check for eibsynrb" refData="#input.arg0.dfheiblk.eibsynrb">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibsynrb</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibnodat failed" name="Check for eibnodat" refData="#input.arg0.dfheiblk.eibnodat">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibnodat</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibresp failed" name="Check for eibresp" refData="#input.arg0.dfheiblk.eibresp">
          <checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg0.dfheiblk.eibresp) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibresp2 failed" name="Check for eibresp2" refData="#input.arg0.dfheiblk.eibresp2">
          <checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg0.dfheiblk.eibresp2) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for eibrldbk failed" name="Check for eibrldbk" refData="#input.arg0.dfheiblk.eibrldbk">
          <checkconditions:expression>x'00' eq output.arg0.dfheiblk.eibrldbk</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">x'00'</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for dfhcommarea failed" name="Check for dfhcommarea" refData="#input.arg1.dfhcommarea.dfhcommarea">
          <checkconditions:expression>'0' eq output.arg1.dfhcommarea.dfhcommarea</checkconditions:expression>
          <checkconditions:expectation assert="=" type="string">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs>
        <testcase:stub>../Stubs/LGTESTC1_HANDLE_03.stub#Unit%20Test/Stubs/LGTESTC1_HANDLE_03.stub</testcase:stub>
        <testcase:stub>../Stubs/LGTESTC1_BMS_SEND_RECEIVE_03.stub#Unit%20Test/Stubs/LGTESTC1_BMS_SEND_RECEIVE_03.stub</testcase:stub>
        <testcase:stub>../Stubs/LGTESTC1_SEND_RECEIVE_03.stub#Unit%20Test/Stubs/LGTESTC1_SEND_RECEIVE_03.stub</testcase:stub>
        <testcase:stub>../Stubs/LGTESTC1_EXEC_CICS_RETURN3_01.stub#Unit%20Test/Stubs/LGTESTC1_EXEC_CICS_RETURN3_01.stub</testcase:stub>
        <testcase:stub>../Stubs/LGTESTC1_SUBP_LGICUS01_03.stub#Unit%20Test/Stubs/LGTESTC1_SUBP_LGICUS01_03.stub</testcase:stub>
      </testcase:stubs>
    </testscenario:testcase>
  </testscenario:testcases>
</testscenario:testscenario>