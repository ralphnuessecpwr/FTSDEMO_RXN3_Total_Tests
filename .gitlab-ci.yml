variables:
    cesUri:                 http://cwcc.compuware.com:2020
    hostUri:                cwcc.compuware.com
    hostPort:               16196
    hostCodePage:           1047
    topazCliWorkspace:      .\TopazCliWkspc
    ispwConfig:             ispw
    ccRepo:                 HDDRXM0.DEMO.COCO.REPOS
    ccSystem:               AZURE_$ispwSet
    ccTestid:               BUILD
    mfSourcesFolder:        MF_Source
    sonarProjectName:       RNU_$ispwApplication_GitLab
    sonarSources:           .\$ispwApplication\MF_Source
    tttEnvironment:         5b508b8a787be73b59238d38
    testFolderVt:           ./Virtualized_Tests
    testResultFolderVt:     ./TTTSonar/Virtualized_Tests.cli.suite.sonar.xml
    junitFile:              ./TTTUnit/Virtualized_Tests.cli.suite.junit.xml
    codeCoverageReportFile: ./Coverage/CodeCoverage.xml
    sonarUri:               http://dtw-sonarqube-cwcc.nasa.cpwr.corp:9000
    sonarProject:           RNU_FTSDEMO_GitLab

stages:
    - mf-sources
    - tests
    - coco
    - sonar

mf-sources:
    stage: mf-sources
    variables:
        ispwTargetLevel: QA1
    rules:
        - if: $ispwSrcLevel == 'DEV2'
          variables:
            ispwTargetLevel: QA2
        - if: $ispwSrcLevel == 'DEV3'
          variables:
            ispwTargetLevel: QA3
        - if: $ispwSrcLevel == 'FIX'
          variables:
            ispwTargetLevel: EMR
    script: |
        echo "Getting Sources from Mainframe for"
        echo "Stream $ispwStream"
        echo "Application $ispwApplication"
        echo "Assignment $ispwAssignment"
        echo "Set $ispwSet"
        echo "Source Level $ispwSrcLevel"
        echo "Target Level $ispwTargetLevel"
        echo "Ownder $ispwOwner"
        cmd.exe /c $cliPath'\SCMDownloaderCLI.bat -host '$hostUri' -port '$hostPort' -id '$hostUser' -pass '$hostPassword' -protocol None -code '$hostCodePage' -timeout 0 -targetFolder .\ -data '$topazCliWorkspace' -ispwServerConfig '$ispwConfig' -scm ispwc -ispwContainerName '$ispwSet' -ispwContainerType 2 -ispwServerLevel '$ispwTargetLevel' -ispwDownloadAll true'
    artifacts:
        paths: 
            - ./
        when: always

tests:
    stage: tests
    needs: [mf-sources]
    variables:
        contextVars: '"ispw_app=$ispwApplication,ispw_level=$ispwTargetLevel"'
        ispwTargetLevel: QA1
    rules:
        - if: $ispwSrcLevel == 'DEV2'
          variables:
            ispwTargetLevel: QA2
        - if: $ispwSrcLevel == 'DEV3'
          variables:
            ispwTargetLevel: QA3
        - if: $ispwSrcLevel == 'FIX'
          variables:
            ispwTargetLevel: EMR
    script: |
        echo "Target Lev $ispwTargetLevel"
        echo "Context $contextVars"
        cmd.exe /c $cliPath'\TotalTestFTCLI.bat -data '$topazCliWorkspace' -host '$hostUri' -port '$hostPort' -u '$hostUser' -p '$hostPassword' -s '$cesUri'/totaltestapi/ -cesu '$hostUser' -cesp '$hostPassword' -f '$testFolderVt' -pnf changedPrograms.json -ccrepo '$ccRepo' -ccsys '$ccSystem' -cctid '$ccTestid' -ccclear true -ctxvars '$contextVars' -R -G -v 6 -l jenkins -loglevel INFO'
    artifacts:
        paths: 
            - ./
        when: always
        reports:
            junit: $junitFile

coco:
    stage: coco
    needs: [tests]
    script: |
        cmd.exe /c $cliPath'\CodeCoverageCLI.bat -host '$hostUri' -port '$hostPort' -id '$hostUser' -pass '$hostPassword' -code '$hostCodePage' -targetFolder ./ -data '$topazCliWorkspace' -cc.repos '$ccRepo' -cc.test '$ccTestid' -cc.system '$ccSystem' -cc.sources '$ispwApplication'/'$mfSourcesFolder' -timeout 0'
    artifacts:
        paths: 
            - ./
        when: always

sonar:
    stage: sonar
    needs: [mf-sources, tests, coco]
    script: |
        cmd.exe /c 'C:\Jenkins\tools\hudson.plugins.sonar.SonarRunnerInstallation\scanner/bin/sonar-scanner -Dsonar.host.url='$sonarUri' -Dsonar.ws.timeout=300 -Dsonar.projectKey='$sonarProject' -Dsonar.projectName='$sonarProject' -Dsonar.projectVersion=1.0 -Dsonar.sources=./'$ispwApplication'/'$mfSourcesFolder' -Dsonar.cobol.copy.directories=./'$ispwApplication'/'$mfSourcesFolder' -Dsonar.cobol.copy.suffixes=cpy -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub,results,scenario,context -Dsonar.tests='$testFolderVt' -Dsonar.testExecutionReportPaths='$testResultFolderVt' -Dsonar.coverageReportPaths='$codeCoverageReportFile
    artifacts:
        paths: 
            - ./
        when: always

quality-gate:
    stage: sonar
    needs: [sonar]
    script: |
        $uri = $sonarUri + "/api/qualitygates/project_status?projectKey=" + $sonarProject

        $headers = @{}
        $headers.Add("Authorization", $sonarAuthorization)
        $headers.Add("Content-Type", "application/json")

        Write-Host "Checking Sonar Quality Gate Status for Project "$sonarProject"."
        Write-Host "URL"
        Write-Host $uri

        $response = Invoke-RestMethod -Uri $uri -method GET -headers $headers
        
        $status = $response.projectStatus.status
        
        Write-Host "Checked Sonar Quality Gate status for Project "$sonarProject"."
        Write-Host "Status is "$status"."
        
        if($status -ne "OK"){
            $LASTEXITCODE = 1
        }
        else
        {
            $LASTEXITCODE = 0
        }    